(* Lexer para Gramática No. 2 - Expresiones aritméticas extendidas *)

(* Introducir cualquier header aqui *)

let delim = ['\s' '\t' '\n']
let ws = delim+
let letter = ['A'-'B' 'a'-'b']
let digit = ['0'-'2']
let dogits = digit+
let id = letter(letter|digit)*
let number = dogits(dogits)?(['+' '-']?dogits)?

rule tokens = 
    ws        { return WHITESPACE }               (* Cambie por una acción válida, que devuelva el token *)
  | id        { return ID }
  | number    { return NUMBER }
  | 'suma'       { return PLUS }
  | 'resta'       { return MINUS }
  | 'multi'       { return TIMES }
  | 'div'       { return DIV }
  | 'lparen'       { return LPAREN }
  | 'rparen'       { return RPAREN }

(* Introducir cualquier trailer aqui *)